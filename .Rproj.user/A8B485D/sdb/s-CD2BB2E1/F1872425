{
    "contents" : "library(stringr)\nlibrary(downloader)\nlibrary(openxlsx)\nlibrary(lubridate)\nlibrary(mongolite)\n\n\nurl1<-\"http://www.usaid.gov/opengov/developer/datasets/SCMS_Delivery_History_Dataset_20150929.csv\"\nsupplyD<-read.csv(url1)\nsummary(supplyD)\n\n\n#Function toconvert dates into date class and w ger deliver time and delay time by converting dates in to nmeric\nderiveDates<-function(){\n  dateSent<- mdy(supplyD$PO.Sent.to.Vendor.Date)# converting all the element sin the flihtdate column to date class\n  dateScheduled <- dmy(supplyD$Scheduled.Delivery.Date)\n  dateDelivered<- dmy(supplyD$Delivered.to.Client.Date)\n  \n  dateSentScore<-as.numeric(dateSent)/86400\n  dateScheduledScore<-as.numeric(dateScheduled)/86400\n  dateDeliveredScore<-as.numeric(dateDelivered)/86400\n  dateScores<-cbind(dateSentScore,dateScheduledScore,dateDeliveredScore)\n  dateScores<-as.data.frame(dateScores)\n  colnames(dateScores)<-c(\"sent\",\"scheduled\",\"delivered\")\n  delivTime<-c()\n  delayTime<-c()\n  for(i in 1:length(dateScores$sent)){\n    dT<-dateScores$delivered[i]-dateScores$sent[i]\n    deT<-dateScores$delivered[i]-dateScores$scheduled[i]\n    delivTime<-c(delivTime,dT)\n    delayTime<-c(delayTime,deT)\n  }\n  \n  supplyData$PO_Sent_to_Vendor_Date<-dateSent\n  supplyData$Scheduled_Delivery_Date<-dateScheduled\n  supplyData$Delivered_t_Client_Date<-dateDelivered\n  supplyData$Year<-year(dateDelivered)\n  supplyData$Delivery_Time<-delivTime\n  supplyData$Delay_Time<-delayTime\n  print(supplyData)\n  \n}\n\n#function to specify product name, we choose the name from molecule list if brand name is generic\ndataProduct<-function(){\n  productData<-c()\n  for(i in 1:length(supplyD$Brand)){\n    if(supplyD$Brand[i]==\"Generic\"){\n      prD<-as.character(supplyD$Molecule.Test.Type[i])\n      \n    }\n    else{\n      prD<-as.character(supplyD$Brand[i])\n    }\n    productData<-c(productData,prD)\n  }\n  supplyData$Product_Name<-productData\n  print (supplyData)\n}\n\n#the following function splits the elements into 3 parts depending on the sym bol / and assigns the column values depending on user input\n#x=column name,y=data frame the new data to be written to, b= 2nd and 3rd column NA values(giveNA),c= 1st column empt values generally 'test' for molecule name\n# NA for dosage\nsplitElements<-function(x,y,b,c,d,e,f){\n  x<-as.character(x)\n  mol1<-c()\n  mol2<-c()\n  mol3<-c()\n  for(i in 1:length(x)){\n    if (length(grep(\"HIV\",x[i],perl=T,value=F))>0){\n      v1<-c\n      v2<-b\n      v3<-b\n    }\n    else {\n      v1<-strsplit(x[i],\"[/]\")[[1]][1]\n      v2<-strsplit(x[i],\"[/]\")[[1]][2]\n      v3<-strsplit(x[i],\"[/]\")[[1]][3]\n    }\n    mol1<-c(mol1,v1)\n    mol2<-c(mol2,v2)\n    mol3<-c(mol3,v3)\n  }\n  \n  y$d<-mol1\n  y$e<-mol2\n  y$f<-mol3\n  names(y)[names(y) == 'd'] <- d\n  names(y)[names(y) == 'e'] <- e\n  names(y)[names(y) == 'f'] <- f\n  \n  \n  y\n}\n\n#divide the dosage into two columns. one column with mg/ml and one with mg\ndesignateDosageUnit<-function(){\n  mlData<-c()\n  mgData<-c()\n  mg1Data<-c()\n  for(i in 1:length(supplyD$Dosage)){\n    if (length(grep(\"mg/ml\",supplyD$Dosage[i],perl=T,value=F))>0){\n      dVal<-strsplit(as.character(supplyD$Dosage[i]),\"mg/ml\")[[1]]\n      \n    }\n    else{\n      dVal<-NA\n    }\n    mlData<-c(mlData,dVal)\n  }\n  for(i in 1:length(supplyD$Dosage)){\n    if (length(grep(\"mg/ml\",supplyD$Dosage[i],perl=T,value=F))>0){\n      dVal1<-NA\n      \n    }\n    else if (length(grep(\"mg\",supplyD$Dosage[i],perl=T,value=F))>0){\n      dVal1<-strsplit(as.character(supplyD$Dosage[i]),\"mg\")[[1]][1]\n\n    }\n    else if (length(grep(\"g\",supplyD$Dosage[i],perl=T,value=F))>0){\n      dVal1<-strsplit(as.character(supplyD$Dosage[i]),\"g\")[[1]]\n      dVal1<-as.character(as.numeric(dVal1)*1000)\n\n    }\n    else{\n      dVal1<-NA\n      \n    }\n    mgData<-c(mgData,dVal1)\n  \n  }\n  for(i in 1:length(supplyD$Dosage)){\n\n    if (length(grep(\"mg\",supplyD$Dosage[i],perl=T,value=F))>0){\n      dVal1<-strsplit(as.character(supplyD$Dosage[i]),\"mg\")[[1]][1]\n      \n    }\n    else if (length(grep(\"g\",supplyD$Dosage[i],perl=T,value=F))>0){\n      dVal1<-strsplit(as.character(supplyD$Dosage[i]),\"g\")[[1]]\n      dVal1<-as.character(as.numeric(dVal1)*1000)\n      \n    }\n    else{\n      dVal1<-NA\n      \n    }\n    mg1Data<-c(mg1Data,dVal1)\n    \n  }\n  supplyData$Dosage_ml_mg<-mlData\n  supplyData$Dosage_mg<-mgData\n  supplyData$Dosage_Unit_mg<-mg1Data\n  \n  supplyData\n\n}\n\n#designate donor=T if pack values is less than 2.5 dollars\ndesignateDonor<-function(){\n  desData<-c()\n  for(i in 1:length(supplyD$Pack.Price)){\n    if(supplyD$Pack.Price[i]<=2.5){\n      des<-\"Y\"\n    }\n    else{\n      des<-\"N\"\n    }\n    desData<-c(desData,des)\n  }\n  supplyData$Donation_Designation<-desData\n  print(supplyData)\n}\n\n#popullating the supply data dataframe from the initial dataframe\n\npopulateData<-function(){\n  supplyData<-data.frame(\"ID\"=supplyD$ID)\n  supplyData$Project_Code<-as.character(supplyD$Project.Code)\n  supplyData$PO_SO<-as.character(supplyD$PO...SO..)\n  supplyData$ASN_DN<-as.character(supplyD$ASN.DN..)\n  supplyData$Country<-as.character(supplyD$Country)\n  supplyData$Managed_By<-as.character(supplyD$Managed.By)\n  supplyData$Fulfill_Via<-as.character(supplyD$Fulfill.Via)\n  supplyData$Shipment_Mode<-as.character(supplyD$Shipment.Mode)\n  supplyData<-deriveDates()\n  supplyData$Product_Group<-supplyD$Product.Group\n  supplyData$Vendor<-supplyD$Vendor\n  supplyData$Molecule_Test_Type<-supplyD$Molecule.Test.Type\n  supplyData<-dataProduct()\n  supplyData<-splitElements(supplyD$Molecule.Test.Type,supplyData,NA,\"test\",\"Molecule_First_Test\",\"Molecule_Second\",\"Molecule_Third\")\n  supplyData<-designateDosageUnit()\n  supplyData<-splitElements(supplyData$Dosage_Unit_mg,supplyData,\"0\",\"0\",\"Dosage_First\",\"Dosage_Second\",\"Dosage_Third\")\n  supplyData$Dosage_Form<-as.character(supplyD$Dosage.Form)\n  supplyData$Unit_of_Measure_Per_Pack<-as.numeric(supplyD$Unit.of.Measure..Per.Pack.)\n  supplyData$Line_Item_Quantity<-as.numeric(supplyD$Line.Item.Quantity)\n  supplyData$Pack_Price<-supplyD$Pack.Price\n  supplyData<-designateDonor()\n  supplyData$First_Line_Designation<-as.character(supplyD$First.Line.Designation)\n  supplyData$Weight_Kilograms<-as.numeric(as.character(supplyD$Weight..Kilograms.))\n  supplyData$Line_Item_Insurance<-as.numeric(supplyD$Line.Item.Insurance..USD.)\n  \n  \n  #converting the NA values in the nmeric columns to 0\n  supplyData$Delivery_Time[is.na(supplyData$Delivery_Time)]<-0\n  supplyData$Delay_Time[is.na(supplyData$Delay_Time)]<-0\n  supplyData$Dosage_First[is.na(supplyData$Dosage_First)]<-0\n  supplyData$Dosage_Second[is.na(supplyData$Dosage_Second)]<-0\n  supplyData$Dosage_Third[is.na(supplyData$Dosage_Third)]<-0\n  supplyData$Unit_of_Measure_Per_Pack[is.na(supplyData$Unit_of_Measure_Per_Pack)]<-0\n  supplyData$Line_Item_Quantity[is.na(supplyData$Line_Item_Quantity)]<-0\n  supplyData$Pack_Price[is.na(supplyData$Pack_Price)]<-0\n  supplyData$Weight_Kilograms[is.na(supplyData$Weight_Kilograms)]<-0\n  supplyData$Line_Item_Insurance[is.na(supplyData$Line_Item_Insurance)]<-0\n  \n}\n\n\n\nurl2<-\"http://apps.who.int/gho/athena/data/xmart.csv?target=GHO/MDG_0000000029&profile=crosstable&filter=COUNTRY:*;REGION:*&x-sideaxis=COUNTRY&x-topaxis=GHO;YEAR\"\nurl3<-\"http://apps.who.int/gho/athena/data/xmart.csv?target=GHO/HIV_0000000001&profile=crosstable&filter=COUNTRY:*;REGION:*&x-sideaxis=COUNTRY&x-topaxis=GHO;YEAR\"\nurl4<-\"http://apps.who.int/gho/athena/data/xmart.csv?target=GHO/HIV_0000000006&profile=crosstable&filter=COUNTRY:*;REGION:*&x-sideaxis=COUNTRY&x-topaxis=GHO;YEAR\"\n\ndownload.file(url4,\"hiv prevalence.csv\")\ndownload.file(url5,\"people with hiv.csv\")\ndownload.file(url6,\"hiv deaths.csv\")\n\nhivP<-read.csv(\"hiv prevalence.csv\",skip=1)\nhivD<-read.csv(\"hiv deaths.csv\",skip=1)\nhivN<-read.csv(\"people with hiv.csv\",skip=1)\n\n#splitting the data into value and confident interval CI\nnumSplit<-function(x){\n  a<-strsplit(x,\"[[]\")\n  aa<-c()\n  bb<-c()\n  for (i in 1:length(a)){\n    aa<-c(aa,a[[i]][1])\n    ab<-a[[i]][2]\n    ab<-strsplit(ab,\"[]]\")\n    ab<-ab[[1]]\n    bb<-c(bb,ab)\n    \n  }\n  d<-cbind(aa,bb)\n  print(d)\n}\n\n\n#clean the complete dataframe from the &lt elements and creating different columns for values and confidence intervals\ndataClean<-function(x){\n  country<-as.character(x[,1])\n  d2013<-as.character(gsub(\"&lt;\",\"\",x[,2]))\n  d2009<-as.character(gsub(\"&lt;\",\"\",x[,3]))\n  d2005<-as.character(gsub(\"&lt;\",\"\",x[,4]))\n  d2001<-as.character(gsub(\"&lt;\",\"\",x[,5]))\n  \n  d2013<-as.character(gsub(\" \",\"\",d2013))\n  d2009<-as.character(gsub(\" \",\"\",d2009))\n  d2005<-as.character(gsub(\" \",\"\",d2005))\n  d2001<-as.character(gsub(\" \",\"\",d2001))\n  \n  d2013<-numSplit(d2013)\n  d2009<-numSplit(d2009)\n  d2005<-numSplit(d2005)\n  d2001<-numSplit(d2001)\n  \n  dataD<-cbind(country,d2013,d2009,d2005,d2001)\n  dataD<-as.data.frame(dataD)\n  colnames(dataD)<-c(\"Country\",\"2013\",\"CI_2013\",\"2009\",\"CI_2009\",\"2005\",\"CI_2005\",\"2001\",\"CI_2001\")\n  print(dataD)\n  \n}\n#renaming the individual dataframes with respect to their types.x= dataframe, y= name to be concatanated to the column name\nrename<-function(x,y){\n  names<-colnames(x)\n  df<-as.data.frame(x)\n  names<-as.character(names)\n  nameList<-c()\n  for (i in 1:length(names)){\n    name<-paste(y,names[i],sep=\"_\")\n    nameList<-c(nameList,name)\n    \n  }\n  colnames(df)<-nameList\n  print(df)\n}\n\n\n#cleaning the data\ndataP<-dataClean(hivP)\ndataD<-dataClean(hivD)\ndataN<-dataClean(hivN)\n\n#renaming the data\ndataP<-rename(dataP,\"prevalence\")\ndataD<-rename(dataD,\"Deaths\")\ndataN<-rename(dataN,\"numberInf\")\n\n#merging the data\nmerged.data<-merge(dataP,dataD,by.x=\"prevalence_Country\",by.y=\"Deaths_Country\")\nmerged.data1<-merge(merged.data,dataN,,by.x=\"prevalence_Country\",by.y=\"numberInf_Country\")\nnames<-colnames(merged.data1)\nnames[1]<-\"Country\"\ncolnames(merged.data1)<-names\n\nfinalData<-merged.data1\n\n\n#creating a database\n\nmongoData<-mongo(\"SCMS\")\nmongoData$insert(supplyData)\nmongoData1<-mongo(\"HIVdata\")\nmongoData1$insert(finalData)\n\nmongoData$count('{\"Country\":\"Vietnam\"}')\n\nyeard<-mongoData$find('{\"Year\":2008}')\nhead(yeard)\ndat <- mongoData$find('{\"Product_Name\":\"Nevirapine\"}', fields = '{\"_id\":0,\"Pack_Price\":1, \"Country\":1,\"Year\":1}')\nhead(dat)\ncountryd<-mongoData1$find('{\"Country\":\"Afghanistan\"}')\nhead(countryd)\nmxdel<-mongoData$aggregate('[{\"$group\":{\"_id\":\"$Country\", \"count\": {\"$sum\":1},\"max\":{\"$max\":\"$Delivery_Time\"}}}]')\nhead(mxdel)\n\n",
    "created" : 1449590230098.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "13|24|41|0|\n44|24|58|0|\n63|39|93|0|\n96|32|155|0|\n231|22|245|0|\n249|23|271|0|\n273|22|285|0|\n",
    "hash" : "2974598859",
    "id" : "F1872425",
    "lastKnownWriteTime" : 1450412042,
    "path" : "~/cleaning and retrieving data/project/project.R",
    "project_path" : "project.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}